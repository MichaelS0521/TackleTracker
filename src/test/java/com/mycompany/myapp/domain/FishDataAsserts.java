package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FishDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFishDataAllPropertiesEquals(FishData expected, FishData actual) {
        assertFishDataAutoGeneratedPropertiesEquals(expected, actual);
        assertFishDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFishDataAllUpdatablePropertiesEquals(FishData expected, FishData actual) {
        assertFishDataUpdatableFieldsEquals(expected, actual);
        assertFishDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFishDataAutoGeneratedPropertiesEquals(FishData expected, FishData actual) {
        assertThat(expected)
            .as("Verify FishData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFishDataUpdatableFieldsEquals(FishData expected, FishData actual) {
        assertThat(expected)
            .as("Verify FishData relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getWaterType()).as("check waterType").isEqualTo(actual.getWaterType()))
            .satisfies(e -> assertThat(e.getWeight()).as("check weight").isEqualTo(actual.getWeight()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFishDataUpdatableRelationshipsEquals(FishData expected, FishData actual) {
        assertThat(expected)
            .as("Verify FishData relationships")
            .satisfies(e -> assertThat(e.getCreatedCatch()).as("check createdCatch").isEqualTo(actual.getCreatedCatch()));
    }
}
