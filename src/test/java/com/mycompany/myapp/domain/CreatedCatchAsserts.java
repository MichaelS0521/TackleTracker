package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CreatedCatchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreatedCatchAllPropertiesEquals(CreatedCatch expected, CreatedCatch actual) {
        assertCreatedCatchAutoGeneratedPropertiesEquals(expected, actual);
        assertCreatedCatchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreatedCatchAllUpdatablePropertiesEquals(CreatedCatch expected, CreatedCatch actual) {
        assertCreatedCatchUpdatableFieldsEquals(expected, actual);
        assertCreatedCatchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreatedCatchAutoGeneratedPropertiesEquals(CreatedCatch expected, CreatedCatch actual) {
        assertThat(expected)
            .as("Verify CreatedCatch auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreatedCatchUpdatableFieldsEquals(CreatedCatch expected, CreatedCatch actual) {
        assertThat(expected)
            .as("Verify CreatedCatch relevant properties")
            .satisfies(e -> assertThat(e.getDatestamp()).as("check datestamp").isEqualTo(actual.getDatestamp()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreatedCatchUpdatableRelationshipsEquals(CreatedCatch expected, CreatedCatch actual) {
        assertThat(expected)
            .as("Verify CreatedCatch relationships")
            .satisfies(e -> assertThat(e.getBaitdata()).as("check baitdata").isEqualTo(actual.getBaitdata()))
            .satisfies(e -> assertThat(e.getWeather()).as("check weather").isEqualTo(actual.getWeather()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }
}
