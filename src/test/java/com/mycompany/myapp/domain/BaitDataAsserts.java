package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BaitDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBaitDataAllPropertiesEquals(BaitData expected, BaitData actual) {
        assertBaitDataAutoGeneratedPropertiesEquals(expected, actual);
        assertBaitDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBaitDataAllUpdatablePropertiesEquals(BaitData expected, BaitData actual) {
        assertBaitDataUpdatableFieldsEquals(expected, actual);
        assertBaitDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBaitDataAutoGeneratedPropertiesEquals(BaitData expected, BaitData actual) {
        assertThat(expected)
            .as("Verify BaitData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBaitDataUpdatableFieldsEquals(BaitData expected, BaitData actual) {
        assertThat(expected)
            .as("Verify BaitData relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getColor()).as("check color").isEqualTo(actual.getColor()))
            .satisfies(e -> assertThat(e.getHard()).as("check hard").isEqualTo(actual.getHard()))
            .satisfies(e -> assertThat(e.getSoft()).as("check soft").isEqualTo(actual.getSoft()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBaitDataUpdatableRelationshipsEquals(BaitData expected, BaitData actual) {
        assertThat(expected)
            .as("Verify BaitData relationships")
            .satisfies(e -> assertThat(e.getCatches()).as("check catches").isEqualTo(actual.getCatches()));
    }
}
